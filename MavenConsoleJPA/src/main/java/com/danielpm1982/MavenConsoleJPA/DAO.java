package com.danielpm1982.MavenConsoleJPA;
import com.danielpm1982.MavenConsoleJPA.Student;
import java.util.List;
import javax.persistence.TypedQuery;
import org.hibernate.Session;
import org.hibernate.SessionFactory;

public class DAO {
	public static List<Student> searchAllStudents(SessionFactory factory) { //search all students. 
		Session session = factory.getCurrentSession();
		try {
			session.getTransaction().begin();
			TypedQuery<Student> query = session.createQuery("from Student", Student.class);
			List<Student> studentList = query.getResultList();
			session.getTransaction().commit();
			return studentList;
		} catch (Exception e) {
			e.printStackTrace(System.out);
			return null;
		} finally {
			session.close();
		}
	}
	public static boolean insertStudent(Student student, SessionFactory factory) { //inserts a Student and turn it managed, setting its id property with the id value generated by the dbsm. Retrieves true if saving succeeds, or false, if not.
		Session session = factory.getCurrentSession();
		try {
			session.getTransaction().begin();
			session.save(student);
			session.getTransaction().commit();
			return true;
		} catch (Exception e) {
			e.printStackTrace(System.out);
			return false;
		} finally {
			session.close();
		}
	}
	public static boolean truncateDBTable(String fullyQualifiedTableName, SessionFactory factory) { //truncate the argument name table, for resetting the id generatedValue counting and eliminating all table rows.
		if(fullyQualifiedTableName!=null) {
			Session session = factory.getCurrentSession();
			try {
				session.getTransaction().begin();
				session.createNativeQuery("truncate table "+fullyQualifiedTableName).executeUpdate();
				session.getTransaction().commit();
				return true;
			} catch (Exception e) {
				e.printStackTrace(System.out);
				return false;
			} finally {
				session.close();
			}
		} else {
			return false;
		}
	}
}
